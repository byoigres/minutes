{"version":3,"sources":["webpack:///./src/pages/Home.js","webpack:///./src/actions/time.js","webpack:///./src/containers/Minutes.js","webpack:///./src/components/MinutesCounter.js","webpack:///./src/components/SquareGrid.js","webpack:///./src/components/Header.js","webpack:///./src/resources/hooks/useInteval.js","webpack:///./src/selectors/selectRemainingTime.js"],"names":["Home","updateTime","type","constants","MinutesContainer","styled","div","p","theme","fullWhite","Wrapper","remainingMinutes","remainingSeconds","selectRemainingTime","dispatch","useDispatch","useInterval","text","id","displayName","formatNumber","number","Intl","NumberFormat","format","MinutesCounter","GridContainer","primaryColor1","StopPassed","stop","primaryColor2","StopAvailable","Path","path","lightWhite","props","currentMinute","column","row","SquareGrid","width","height","viewBox","preserveAspectRatio","xmlns","x1","x2","y1","y2","offset","Array","fill","map","_","__","key","d","Header","h1","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useSelector","time","shallowEqual"],"mappings":"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","file":"5.4eebd03cd71d1e8cc5fe.js","sourcesContent":["import React from 'react';\nimport Minutes from '../containers/Minutes';\n\nconst Home = () => (\n  <Minutes />\n);\n\nexport default Home;\n","import * as constants from '../constants';\n\nexport function updateTime() {\n  return {\n    type: constants.UPDATE_TIME,\n  };\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport MinutesCounter from '../components/MinutesCounter';\nimport SquareGrid from '../components/SquareGrid';\nimport Header from '../components/Header';\nimport useInterval from '../resources/hooks/useInteval';\nimport { updateTime } from '../actions/index';\nimport selectRemainingTime from '../selectors/selectRemainingTime';\n\nconst MinutesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  overflow: hidden;\n  text-align: center;\n  color: ${p => p.theme.fullWhite};\n  max-width: 76rem;\n  width: 100%;\n  min-height: 100%;\n`;\n\nconst Wrapper = () => {\n  const {\n    remainingMinutes,\n    remainingSeconds\n  } = selectRemainingTime();\n\n  const dispatch = useDispatch();\n\n  useInterval(() => {\n    dispatch(updateTime());\n  }, 1000);\n\n  return (\n    <MinutesContainer>\n      <SquareGrid\n        remainingMinutes={remainingMinutes}\n        remainingSeconds={remainingSeconds}\n      />\n      <Header text={<FormattedMessage id=\"app.title\" />} />\n      <MinutesCounter remainingMinutes={remainingMinutes} />\n    </MinutesContainer>\n  );\n};\n\nWrapper.displayName = 'MinutesContainer';\n\nexport default Wrapper;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst formatNumber = number => Intl.NumberFormat().format(number);\n\nconst MinutesCounter = styled.div`\n  font-family: 'Fjalla One';\n  z-index: 5;\n  margin: 0;\n  padding: 0;\n  text-shadow:\n    0 0.0625rem 0 #ccc,\n    0 0.125rem 0 #c9c9c9,\n    0 0.1875rem 0 #bbb,\n    0 0.25rem 0 #b9b9b9,\n    0 0.3125rem 0 #aaa,\n    0 0.375rem 0.0625rem rgba(0, 0,0,.1),\n    0 0 5px rgba(0,0,0,.1),\n    0 0.0625rem 0.1875rem rgba(0,0,0,.3),\n    0 0.1875rem 0.3125rem rgba(0,0,0,.2),\n    0 0.375rem 0.625rem rgba(0,0,0,.25),\n    0 0.625rem 0.625rem rgba(0,0,0,.2),\n    0 1.25rem 1.25rem rgba(0,0,0,.15);\n\n  @media only screen and (max-width: 21rem) { /* width < 21rem */\n    font-size: 6rem;\n  }\n\n  @media only screen and (min-width: 21rem) and (max-width: 62rem) {  /* width > 21rem) and (width < 62rem */\n    font-size: 10rem;\n  }\n\n  @media only screen and (min-width: 62rem) { /* width > 62rem */\n    font-size: 18rem;\n  }\n`;\n\nconst Wrapper = ({ remainingMinutes }) => (\n  <MinutesCounter>\n    {formatNumber(remainingMinutes)}\n  </MinutesCounter>\n);\n\nWrapper.displayName = 'MinutesCounter';\n\nexport default Wrapper;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst GridContainer = styled.div`\n  background-color: ${p => p.theme.primaryColor1};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 4rem; /** From Minutes.jsx */\n  z-index: 5; /** From Minutes.jsx */\n`;\n\nconst StopPassed = styled.stop`\n  stop-color: ${p => p.theme.primaryColor2};\n`;\n\nconst StopAvailable = styled.stop`\n  stop-color: transparent;\n`;\n\nconst Path = styled.path`\n  stroke: ${p => p.theme.lightWhite};\n  stroke-width: 0.01;\n\n  fill: ${props => {\n    const currentMinute = 1440 - ((props.column * 72) + (props.row + 1));\n\n    if (currentMinute === props.remainingMinutes) {\n      return 'url(#Progress)';\n    } else if (currentMinute < props.remainingMinutes) {\n      return 'none';\n    }\n\n    return props.theme.primaryColor2;\n  }};\n`;\n\nconst SquareGrid = ({ remainingMinutes, remainingSeconds }) => (\n  <GridContainer>\n    <svg\n      width=\"100%\"\n      height=\"100%\"\n      viewBox=\"0 0 72 20\"\n      preserveAspectRatio=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <defs>\n        <linearGradient id=\"Progress\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n          <StopPassed offset={`${(remainingSeconds * 100) / 60}%`} />\n          <StopAvailable offset={`${(remainingSeconds * 100) / 60}%`} />\n        </linearGradient>\n      </defs>\n      {\n        Array(20).fill().map((_, column) => (\n          Array(72).fill().map((__, row) => (\n            <Path\n              key={`path-${column}-${row}`}\n              remainingMinutes={remainingMinutes}\n              row={row}\n              column={column}\n              d={`M${row} ${column}h1v1H${row}z`}\n            />\n          ))\n        ))\n      }\n    </svg>\n  </GridContainer>\n);\n\nSquareGrid.displayName = 'SquareGrid';\n\nexport default SquareGrid;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = styled.h1`\n  margin: 0;\n  padding: 0;\n  z-index: 5;\n\n  @media only screen and (max-width: 62rem) { /** width < 62rem */\n    font-size: 2rem;\n    margin: 2rem 1rem;\n  }\n`;\n\nconst Wrapper = ({ text }) => (\n  <Header>\n    {text}\n  </Header>\n);\n\nWrapper.displayName = 'Header';\n\nexport default Wrapper;\n","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import { useSelector, shallowEqual } from 'react-redux';\n\nexport default () => useSelector(\n  ({\n    time: {\n      remainingMinutes,\n      remainingSeconds,\n    },\n  }) => ({\n    remainingMinutes,\n    remainingSeconds\n  }),\n  shallowEqual\n);\n"],"sourceRoot":""}